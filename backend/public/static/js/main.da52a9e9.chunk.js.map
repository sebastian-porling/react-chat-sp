{"version":3,"sources":["config/init-firebase.js","services/authService.js","views/start-page/LoginButton.js","views/start-page/StartPage.js","views/LogoutButton.js","services/socketService.js","providers/UserProvider.js","views/chat-page/RoomSwitcher.js","views/chat-page/RoomUsers.js","config/colors.js","views/chat-page/UserColorSelector.js","views/chat-page/ChatForm.js","views/chat-page/ChatMessage.js","views/chat-page/Chat.js","views/chat-page/ChatPage.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","googleProvider","GoogleAuthProvider","database","loginWithGoogle","a","signInWithPopup","then","writeAdditionalUserData","logout","signOut","loggedIn","currentUser","getUserToken","getIdToken","getCurrentUser","user","ref","uid","once","snapshot","exists","set","color","getUserColor","cb","val","changeUserColor","LoginButton","AuthService","console","log","style","textAlign","marginTop","Button","onClick","StartPage","LogoutButton","error","position","top","right","zIndex","initSocketIO","jwtToken","io","transports","query","token","joinRoom","chatroomName","socket","emit","leaveRoom","sendMessage","message","text","UserContext","createContext","users","UserProvider","state","componentDidMount","onAuthStateChanged","setState","userToken","Provider","value","this","props","children","Component","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","RoomSwitcher","classes","useState","rooms","setRooms","room","changeRoom","useContext","useEffect","getRooms","FormControl","className","InputLabel","id","Select","labelId","onChange","e","preventDefault","target","map","MenuItem","key","root","display","justifyContent","alignItems","inline","RoomUsers","AvatarGroup","max","Avatar","alt","name","src","picture","purple","red","pink","indigo","blue","teal","cyan","green","lime","yellow","orange","bluegrey","white","UserColorSelector","changeColor","colors","Object","keys","bottom","padding","maxWidth","width","input","marginLeft","flex","iconButton","ChatForm","userColor","setMessage","sendMessageHandler","Paper","component","InputBase","multiline","fullWidth","placeholder","inputProps","IconButton","aria-label","ChatMessage","time","ListItem","ListItemAvatar","ListItemText","primary","secondary","height","maxHeight","overflowY","Chat","messages","messagesEndRef","useRef","current","scrollIntoView","behavior","List","ChatPage","setRoom","setUsers","setMessages","setUserColor","on","updateMessages","newUsers","updateUsers","window","onbeforeunload","off","newRoom","handleJoinRoom","err","chat","newUserColor","App","prefersDarkMode","useMediaQuery","React","useMemo","createMuiTheme","palette","type","typography","fontFamily","backgroundColor","CssBaseline","background","topbarTitle","displayName","barHeight","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da52a9e9.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\n/**\n * All necessary urls and keys for firebase\n */\nvar firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n};\n\n/**\n * Initialize the firebase app\n */\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\nexport const database = firebase.database();\n","import { auth, database, googleProvider } from \"../config/init-firebase\";\n\n/**\n * Login via google window popup\n */\nconst loginWithGoogle = async () => {\n    return auth.signInWithPopup(googleProvider).then(writeAdditionalUserData);\n};\n\n/**\n * Logout from firebase\n */\nconst logout = async () => {\n    auth.signOut();\n};\n\n/**\n * Check if we are logged in\n */\nconst loggedIn = async () => {\n    return auth.currentUser ? true : false;\n};\n\n/**\n * receive the jwt token of the current user from firebase\n */\nconst getUserToken = async () => {\n    return auth.currentUser.getIdToken(true);\n};\n\n/**\n * receive the current logged in used\n */\nconst getCurrentUser = async () => {\n    return auth.currentUser;\n};\n\n/**\n * Add information about the color for the user\n * When logged in for the first time\n */\nconst writeAdditionalUserData = async () => {\n    const user = await getCurrentUser();\n    const ref = database.ref(`users/${user.uid}`);\n    ref.once(\"value\", (snapshot) => {\n        if (!snapshot.exists()) {\n            const color = { color: \"white\" };\n            database.ref(`users/${user.uid}`).set(color);\n        }\n    });\n};\n\n/**\n * Receive the user color and send it to callback\n * @param {Function} cb Callback\n */\nconst getUserColor = async (cb) => {\n    const user = await getCurrentUser();\n    const ref = database.ref(`users/${user.uid}`);\n    ref.once(\"value\", (snapshot) => {\n        if (snapshot.exists()) {\n            cb(snapshot.val());\n        } else {\n            cb({ color: \"white\" });\n        }\n    });\n};\n\n/**\n * Change the current users color\n * @param {String} color One of the colors in colors.js\n */\nconst changeUserColor = async (color) => {\n    const user = await getCurrentUser();\n    database.ref(`/users/${user.uid}/color/`).set(color);\n};\n\nexport default {\n    loginWithGoogle,\n    logout,\n    loggedIn,\n    getUserToken,\n    getCurrentUser,\n    changeUserColor,\n    getUserColor,\n};\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nimport AuthService from \"../../services/authService\";\n\n/**\n * Represents a button that logs in a user with\n * firebase and google\n */\nconst LoginButton = () => {\n\n    /**\n     * Logs in the user with google\n     */\n    const loginWithGoogle = async () => {\n        try {\n            await AuthService.loginWithGoogle();\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    /**\n     * Renders the login button\n     */\n    return (\n        <div style={{ textAlign: \"center\", marginTop: \"30vh\" }}>\n            <Button color=\"secondary\" onClick={loginWithGoogle}>\n                Google Login\n            </Button>\n        </div>\n    );\n};\n\nexport default LoginButton;\n","import React from \"react\";\nimport LoginButton from \"./LoginButton\"\nimport \"./StartPage.css\";\n\n/**\n * A starting page with a login button\n */\nconst StartPage = () => {\n\n    /**\n     * Generates a start page with a welcome message and a login button\n     */\n    return (\n        <>\n            <h1>Welcome to the react-chat</h1>\n            <h3>Login using your google account to start chatting...</h3>\n            <LoginButton />\n        </>\n    );\n};\n\nexport default StartPage;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nimport AuthService from \"../services/authService\";\n\n/**\n * A logout button\n */\nconst LogoutButton = () => {\n\n    /**\n     * Logs out the user using firebase\n     */\n    const logout = async () => {\n        try {\n            AuthService.logout();\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    /**\n     * Renders the button to be in the upper right corner\n     */\n    return (\n        <div\n            style={{\n                position: \"absolute\",\n                top: \"2px\",\n                right: \"10px\",\n                zIndex: \"1000\",\n            }}\n        >\n            <Button color=\"secondary\" onClick={logout}>\n                Logout\n            </Button>\n        </div>\n    );\n};\n\nexport default LogoutButton;\n","import io from \"socket.io-client\";\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\n/**\n * Create a socket with a jwt token\n * @param {token} jwtToken user jwt token\n */\nconst initSocketIO = (jwtToken) => {\n    if (!jwtToken) return;\n    const socketIO = io(API_URL, {\n        transports: [\"websocket\"],\n        query: {\n            token: jwtToken,\n        },\n    });\n    return socketIO;\n};\n\n/**\n * Join a chat room by name\n * @param {String} chatroomName name of the chat room\n * @param {SocketOI} socket client socket\n * @param {Function} cb callback\n */\nconst joinRoom = (chatroomName, socket, cb) => {\n    socket.emit(\"join\", chatroomName, cb);\n};\n\n/**\n * Leave the room by name\n * @param {String} chatroomName name of the chat room\n * @param {SocketIO} socket client socket\n * @param {Function} cb callback\n */\nconst leaveRoom = (chatroomName, socket, cb) => {\n    socket.emit(\"leave\", chatroomName, cb);\n};\n\n/**\n * Send a message to the chatroom\n * @param {String} chatroomName name of the chat room\n * @param {Any} message A message to be sent\n * @param {Any} color A string or object that represents a color from color.js\n * @param {SocketIO} socket client socket\n * @param {Function} cb Callback\n */\nconst sendMessage = (chatroomName, message, color, socket, cb) => {\n    socket.emit(\n        \"message\",\n        { chatroomName, message: { text: message, color: color } },\n        cb\n    );\n};\n\n/**\n * get all chatroom names\n * @param {SocketIO} socket client socket\n * @param {Function} cb callback\n */\nconst getRooms = (socket, cb) => {\n    socket.emit(\"chatrooms\", cb);\n};\n\n/**\n * Get all logged in users\n * @param {SocketIO} socket client socket\n * @param {Function} cb Callback\n */\nconst getUsers = (socket, cb) => {\n    socket.emit(\"users\", cb);\n};\n\nexport {\n    initSocketIO,\n    joinRoom,\n    leaveRoom,\n    sendMessage,\n    getRooms,\n    getUsers,\n};\n","import React, { Component, createContext } from \"react\";\nimport { auth } from \"../config/init-firebase\";\nimport { initSocketIO } from \"../services/socketService\";\nimport AuthService from \"../services/authService\";\n\n/**\n *\n */\nexport const UserContext = createContext({ user: null, users: [] });\n\n/**\n *\n */\nclass UserProvider extends Component {\n    state = {\n        user: null,\n        socket: null,\n    };\n\n    /**\n     * When component mounts,\n     * Handle changes in current user.\n     */\n    componentDidMount = () => {\n        auth.onAuthStateChanged(async (user) => {\n            if (!user) {\n                this.setState({ user });\n                return;\n            }\n            try {\n                const userToken = await AuthService.getUserToken();\n                const socket = initSocketIO(userToken);\n                this.setState({ user, socket });\n            } catch (error) {\n                this.setState({ user: null, socket: null });\n                console.log(error);\n            }\n        });\n    };\n\n    /**\n     * Render the UserContext and add the state and children.\n     */\n    render() {\n        return (\n            <UserContext.Provider value={{ ...this.state }}>\n                {this.props.children}\n            </UserContext.Provider>\n        );\n    }\n}\nexport default UserProvider;\n","import React, {useState, useEffect, useContext} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\n\nimport {UserContext} from '../../providers/UserProvider'\nimport {getRooms} from '../../services/socketService'\n\n/**\n * Css styling\n */\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }));\n\n/**\n * A element that is a selector for changing rooms\n * @param {props} props\n */\nconst RoomSwitcher = (props) => {\n    const classes = useStyles();\n    const [rooms, setRooms] = useState([]);\n    const {room, changeRoom} = props;\n    const {socket} = useContext(UserContext);\n\n    /**\n     * Change the room when a new room is selected\n     * @param {event} e event\n     */\n    const handleChange = (e) => {\n        e.preventDefault();\n        changeRoom(e.target.value);\n    }\n\n    /**\n     * Get all rooms available\n     */\n    useEffect(() => {\n        const handleRooms = async (rooms) => {\n            setRooms(rooms);\n            changeRoom(rooms[0]);\n        }\n        getRooms(socket, handleRooms);\n    }, [])\n\n    /**\n     * Generate the selector\n     */\n    return (\n        <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-label\">room</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={room}\n          onChange={handleChange}\n        >\n            {rooms.map(room => <MenuItem value={room} key={room}>{room}</MenuItem>)}\n        </Select>\n      </FormControl>\n    )\n}\n\nexport default RoomSwitcher\n","import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport AvatarGroup from \"@material-ui/lab/AvatarGroup\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport \"./RoomUsers.css\";\n\n/**\n * Css styling\n */\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: \"flex\",\n        justifyContent: \"around\",\n        alignItems: \"center\",\n    },\n    inline: {\n        display: \"inline\",\n    },\n}));\n\n/**\n * Generates avatars for all logged in users for a specific room\n * @param {props} param0 taking in the array of users\n */\nconst RoomUsers = ({ users }) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <h4>Users: </h4>\n            <AvatarGroup max={8}>\n                {users.map((user) => (\n                    <Avatar key={user} alt={user.name} src={user.picture} />\n                ))}\n            </AvatarGroup>\n        </div>\n    );\n};\n\nexport default RoomUsers;\n","\n/**\n * Colors that is used in the\n * color selector and chat\n */\nexport default {\n    purple: \"#9c27b0\",\n    red: \"#d32f2f\",\n    pink: \"#d81b60\",\n    indigo: \"#3949ab\",\n    blue: \"#1e88e5\",\n    teal: \"#009688\",\n    cyan: \"#0097a7\",\n    green: \"#43a047\",\n    lime: \"#cddc39\",\n    yellow: \"#ffeb3b\",\n    orange: \"#fb8c00\",\n    bluegrey: \"#607d8b\",\n    white: \"#ffffff\",\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nimport colors from \"../../config/colors\";\n\n/**\n * Css styling\n */\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\n/**\n * A selector for user color\n * @param {props} param0 taking in the user color and change color function\n */\nconst UserColorSelector = ({ color, changeColor }) => {\n    const classes = useStyles();\n\n    /**\n     * Change the color when a new color is selected\n     * @param {event} e event\n     */\n    const handleChange = (e) => {\n        e.preventDefault();\n        changeColor(e.target.value);\n    };\n\n    /**\n     * Generates the color selector\n     */\n    return (\n        <FormControl className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-label\">color</InputLabel>\n            <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={color}\n                style={{ color: colors[color] }}\n                onChange={handleChange}\n            >\n                {Object.keys(colors).map((key) => (\n                    <MenuItem\n                        style={{ color: colors[key] }}\n                        value={key}\n                        key={key}\n                    >\n                        {key}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n};\n\nexport default UserColorSelector;\n","import React, { useState, useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport { sendMessage } from \"../../services/socketService\";\nimport { UserContext } from \"../../providers/UserProvider\";\n\n/**\n * Css styling\n */\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        position: \"absolute\",\n        bottom: \"5px\",\n        padding: \"2px 4px\",\n        display: \"flex\",\n        alignItems: \"center\",\n        maxWidth: \"600px\",\n        width: \"96%\",\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n}));\n\n/**\n * Representing a form that can send messages\n * @param {props} param0 taking in the current room and user chat color\n */\nconst ChatForm = ({ room, userColor }) => {\n    const classes = useStyles();\n    const { socket } = useContext(UserContext);\n    const [message, setMessage] = useState(\"\");\n\n    /**\n     * If message is not empty send it and reset form\n     */\n    const sendMessageHandler = async () => {\n        if (message !== \"\") {\n            sendMessage(room, message, userColor, socket);\n            setMessage(\"\");\n        }\n    };\n\n    /**\n     * Rendering the chat form\n     */\n    return (\n        <Paper component=\"form\" className={classes.root}>\n            <InputBase\n                className={classes.input}\n                multiline={true}\n                fullWidth={true}\n                placeholder=\"message, like 'Hello world'\"\n                inputProps={{ \"aria-label\": 'message, like \"hello world\"' }}\n                onChange={(e) => setMessage(e.target.value)}\n                value={message}\n            />\n            <IconButton\n                className={classes.iconButton}\n                aria-label=\"send\"\n                onClick={sendMessageHandler}\n            >\n                <SendIcon />\n            </IconButton>\n        </Paper>\n    );\n};\n\nexport default ChatForm;\n","import React from \"react\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport colors from \"../../config/colors\";\n\n/**\n * Generates a item that represents a message\n * @param {props} param0 taking in a message, user and time\n */\nconst ChatMessage = ({ message, user, time }) => {\n    return (\n        <ListItem alignItems=\"flex-start\">\n            <ListItemAvatar>\n                <Avatar alt={user.name} src={user.picture} />\n            </ListItemAvatar>\n            <ListItemText\n                primary={user.name}\n                secondary={\n                    <span\n                        style={{\n                            color: message.color\n                                ? colors[message.color]\n                                : \"#ffffff\",\n                        }}\n                    >\n                        {message.text ? message.text : message}\n                    </span>\n                }\n            />\n        </ListItem>\n    );\n};\n\nexport default ChatMessage;\n","import React, { useEffect, useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\n\nimport ChatMessage from \"./ChatMessage\";\n\n/**\n * Css styling\n */\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: \"100%\",\n        maxHeight: \"65vh\",\n        maxWidth: \"600px\",\n        overflowY: \"scroll\",\n    },\n    inline: {\n        display: \"inline\",\n    },\n}));\n\n/**\n * Class displaying all messages for a given room\n * @param {props} Taking in the messages array\n */\nconst Chat = ({ messages }) => {\n    const classes = useStyles();\n    const messagesEndRef = useRef(null);\n\n    /**\n     * Scroll the chat to the bottom\n     */\n    const scrollToBottom = () => {\n        messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    };\n    useEffect(scrollToBottom, [messages]);\n\n    /**\n     * Render all messages\n     */\n    return (\n        <List className={classes.root}>\n            {messages.map((message) => (\n                <ChatMessage\n                    key={message.time}\n                    message={message.message}\n                    user={message.user}\n                    time={message.time}\n                />\n            ))}\n            <div ref={messagesEndRef} />\n        </List>\n    );\n};\n\nexport default Chat;\n","import React, { useState, useContext, useEffect } from \"react\";\n\nimport LogoutButton from \"../LogoutButton\";\nimport RoomSwitcher from \"./RoomSwitcher\";\nimport RoomUsers from \"./RoomUsers\";\nimport UserColorSelector from \"./UserColorSelector\";\nimport ChatForm from \"./ChatForm\";\nimport Chat from \"./Chat\";\n\nimport { UserContext } from \"../../providers/UserProvider\";\nimport { joinRoom, leaveRoom } from \"../../services/socketService\";\nimport AuthService from \"../../services/authService\";\n\nconst ChatPage = () => {\n    const { socket } = useContext(UserContext);\n    const [room, setRoom] = useState(\"\");\n    const [users, setUsers] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const [userColor, setUserColor] = useState(\"white\");\n\n    /**\n     * Setup eventlisteners for messages and users.\n     * Get the current users chat color\n     * And setup the window to leave the room when quitting\n     */\n    useEffect(() => {\n        socket.on(\"message\", (message) => {\n            updateMessages(message);\n        });\n        socket.on(\"users\", (newUsers) => {\n            updateUsers(newUsers);\n        });\n        AuthService.getUserColor(({ color }) => {\n            setUserColor(color);\n        });\n        window.onbeforeunload = () => {\n            leaveRoom(room, socket, () => {});\n            socket.off();\n        };\n    }, []);\n\n    /**\n     * Change the room\n     * @param {String} newRoom chat room name\n     */\n    const changeRoom = async (newRoom) => {\n        if (room === \"\") {\n            handleJoinRoom(newRoom);\n        } else {\n            leaveRoom(room, socket, async (err) => {\n                if (err) console.log(err);\n                handleJoinRoom(newRoom);\n            });\n        }\n    };\n\n    /**\n     * Join a new room and change the room state\n     * and messages for that room.\n     * @param {String} newRoom name of chat room\n     */\n    const handleJoinRoom = async (newRoom) => {\n        joinRoom(newRoom, socket, (err, chat) =>{\n            if (err) console.log(err);\n            setMessages(chat);\n            setRoom(newRoom);\n            return;\n        });\n    }\n\n    /**\n     * Append messages to the message state\n     * @param {Array} message array of messages\n     */\n    const updateMessages = (message) => {\n        if (message.message) {\n            setMessages((messages) => [...messages, message]);\n        }\n    };\n\n    /**\n     * Updates the users state\n     * @param {Array} newUsers array of users\n     */\n    const updateUsers = (newUsers) => {\n        setUsers(newUsers);\n    };\n\n    /**\n     * Changes the color of the current user, in state and firebase\n     * @param {String} newUserColor color string from color.js\n     */\n    const changeUserColor = (newUserColor) => {\n        setUserColor(newUserColor);\n        AuthService.changeUserColor(newUserColor);\n    };\n\n    /**\n     * Render ChatPage\n     * Using RoomSwitcher for changing rooms,\n     * UserColorSelector for changing color,\n     * LogoutButton\n     * Chat for displaying messages\n     * RoomUsers for displaying logged in users in chat room\n     * ChatForm for sending messages\n     */\n    return (\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n            <div style={{ maxWidth: \"600px\", width: \"100%\" }}>\n                <RoomSwitcher room={room} changeRoom={changeRoom} />\n                <UserColorSelector\n                    color={userColor}\n                    changeColor={changeUserColor}\n                />\n                <LogoutButton />\n                <RoomUsers users={users} />\n                <Chat room={room} messages={messages} />\n                <ChatForm room={room} userColor={userColor} />\n            </div>\n        </div>\n    );\n};\n\nexport default ChatPage;\n","import React, { useContext } from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { Terminal } from \"react-window-ui\";\r\nimport StartPage from \"./views/start-page/StartPage\";\r\nimport ChatPage from \"./views/chat-page/ChatPage\";\r\nimport { UserContext } from \"./providers/UserProvider\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nfunction App() {\r\n    const { user } = useContext(UserContext);\r\n    const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\r\n\r\n    /**\r\n     * Setup the material-ui theme\r\n     */\r\n    const theme = React.useMemo(\r\n        () =>\r\n            createMuiTheme({\r\n                palette: {\r\n                    type: prefersDarkMode ? \"dark\" : \"light\",\r\n                },\r\n                typography: {\r\n                    fontFamily: 'hack'\r\n                }\r\n            }),\r\n        [prefersDarkMode]\r\n    );\r\n\r\n    /**\r\n     * Render the app\r\n     */\r\n    return (\r\n        <div\r\n            style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                backgroundColor: \"#666666\",\r\n            }}\r\n        >\r\n            <CssBaseline />\r\n            <Terminal\r\n                background=\"#232537\"\r\n                topbarTitle={user ? user.displayName : \"react-chat\"}\r\n                barHeight=\"40px\"\r\n                style={{\r\n                    margin: \"2vh\",\r\n                    maxWidth: \"1200px\",\r\n                    width: \"100%\",\r\n                    height: \"96vh\",\r\n                    fontFamily: \"hack\",\r\n                }}\r\n            >\r\n                <ThemeProvider theme={theme}>\r\n                    {user ? <ChatPage /> : <StartPage />}\r\n                </ThemeProvider>\r\n            </Terminal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport UserProvider from \"./providers/UserProvider\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <UserProvider>\r\n            <App />\r\n        </UserProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}